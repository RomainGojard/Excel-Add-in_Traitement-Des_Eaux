{"version":3,"file":"taskpane.js","mappings":"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","sources":["webpack://office-addin-taskpane-js/./node_modules/html-loader/dist/runtime/getUrl.js","webpack://office-addin-taskpane-js/webpack/bootstrap","webpack://office-addin-taskpane-js/webpack/runtime/compat get default export","webpack://office-addin-taskpane-js/webpack/runtime/define property getters","webpack://office-addin-taskpane-js/webpack/runtime/global","webpack://office-addin-taskpane-js/webpack/runtime/hasOwnProperty shorthand","webpack://office-addin-taskpane-js/webpack/runtime/publicPath","webpack://office-addin-taskpane-js/webpack/runtime/jsonp chunk loading","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.js","webpack://office-addin-taskpane-js/./src/taskpane/taskpane.html"],"sourcesContent":["\"use strict\";\n\nmodule.exports = function (url, options) {\n  if (!options) {\n    // eslint-disable-next-line no-param-reassign\n    options = {};\n  }\n\n  if (!url) {\n    return url;\n  } // eslint-disable-next-line no-underscore-dangle, no-param-reassign\n\n\n  url = String(url.__esModule ? url.default : url);\n\n  if (options.hash) {\n    // eslint-disable-next-line no-param-reassign\n    url += options.hash;\n  }\n\n  if (options.maybeNeedQuotes && /[\\t\\n\\f\\r \"'=<>`]/.test(url)) {\n    return \"\\\"\".concat(url, \"\\\"\");\n  }\n\n  return url;\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript)\n\t\tscriptUrl = document.currentScript.src\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) scriptUrl = scripts[scripts.length - 1].src\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t41: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n// no on chunks loaded\n\n// no jsonp function","/*\n * Copyright (c) Microsoft Corporation. All rights reserved. Licensed under the MIT license.\n * See LICENSE in the project root for license information.\n */\n\n/* global console, document, Excel, Office */\n\nvar SHEET_NAME_BDD = \"_BDD\";\nvar BASE_ETAPES_NOM_TABLE = \"baseEtapes\";\nvar BASE_PARENTS_NOM_TABLE = \"baseParents\";\nvar SHEET_NAME_DONNEES_ENTREE = \"Données_entrée\";\nvar SHEET_NAME_TABLE_CONFIG = \"Configuration - Entrées Sorties\";\nvar TABLE_CONFIG_NOM = \"tableConfig\";\nvar LIGNE_PERTES_EN_EAU_SUR_CETTE_ETAPES_TABLEAU_SORTIE = 4;\nvar ADRESSES_PERTES_EN_EAU_DONNES_ENTREE = [\"!C10\", \"!D10\", \"!E10\", \"!F10\"];\nvar ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE = [\"!C12\", \"!D12\", \"!E12\", \"!F12\"];\n\nOffice.onReady((info) => {\n  if (info.host === Office.HostType.Excel) {\n    document.getElementById(\"sideload-msg\").style.display = \"none\";\n    document.getElementById(\"app-body\").style.display = \"flex\";\n\n    //document.getElementById(\"open-dialog\").onclick = openDialog;\n    document.getElementById(\"app\").addEventListener(\"click\", app);\n  }\n});\n\n/**\n * Application principale qui est appelée lorsqu'on clique sur le bouton \"Lancer le processus\". Envoie une erreur si le processus ne fonctionne pas\n */\nasync function app() {\n  Excel.run(async (context) => {\n    try {\n      await runProcess().catch((error) => {\n        throw error;\n      });\n      openDialog(\"Processus terminé avec succès\");\n      return context;\n    } catch (error) {\n      // afficher le message d'erreur dans une popup\n      errorPopUp(error);\n      console.error(error);\n      return context.sync();\n    }\n  });\n}\n\n/**\n * Fonction pour exécuter le processus\n */\nasync function runProcess() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      await sortBDD().catch((error) => {\n        throw (\n          error +\n          \" - La base de données est introuvable. Veuillez vérifier que vous utilisez l'application depuis le modèle prévu\"\n        );\n      });\n      const BDD = await getBDD();\n      const baseEtapes = BDD[0];\n      const baseParents = BDD[1];\n      const worksheetsEtapes = await initSheets(baseEtapes);\n      let allTables = await initAllTables();\n      for (let i = 0; i < baseEtapes.length; i++) {\n        const etape = baseEtapes[i];\n        if (etape[0] == 1) {\n          await EtapeUne(etape, worksheetsEtapes[0], allTables);\n        } else {\n          const idEtape = etape[0];\n          const parents = baseParents.filter((ligne) => ligne[1] == idEtape);\n          await EtapeN(etape, worksheetsEtapes[idEtape - 1], parents, baseEtapes, allTables);\n        }\n      }\n      calculPertesEnEau(allTables, baseEtapes);\n      resolve();\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\n\n/**\n * focntion qui initialise les feuilles d'étapes\n * @param {string[]} baseEtapes base d'étapes\n * @returns {Promise} une promesse qui renvoie un tableau contenant les noms des feuilles d'étapes\n */\nasync function initSheets(baseEtapes) {\n  return new Promise((resolve, reject) => {\n    Excel.run(async (context) => {\n      let worksheetsEtapes = [];\n      const sheetBDD = context.workbook.worksheets.getItem(SHEET_NAME_BDD);\n      for (const etape of baseEtapes) {\n        const id = etape[0]; //premier élément de la rangée est le nom de l'étape\n        const nomEtape = etape[1]; //deuxième élément de la rangée est le nom de la feuille\n        const nomFeuille = nomEtape + \"|\" + id;\n        const sheetExists = await worksheetExists(nomFeuille);\n        if (!sheetExists) {\n          //obtenir le modèle de la feuille\n          const sheetModel = context.workbook.worksheets.getItem(\"MODEL_\" + nomEtape);\n          await context.sync();\n          //dupliquer la feuille de base\n          let newSheet = sheetModel.copy(\"Before\", sheetBDD);\n          await context.sync();\n          //set name of new sheet\n          newSheet.name = nomFeuille;\n          newSheet.visibility = \"Visible\";\n        }\n        await context.sync();\n        worksheetsEtapes.push(nomFeuille);\n      }\n      deleteOldEtapes(worksheetsEtapes);\n      await context.sync();\n      resolve(worksheetsEtapes);\n      await context.sync();\n    }).catch((error) => reject(error));\n  });\n}\n\n/**\n * fonction qui rennvoie la base de données\n * @returns {Promise} une promesse qui renvoie la base de données\n */\nasync function getBDD() {\n  return new Promise((resolve, reject) => {\n    Excel.run(async (context) => {\n      const sheetBDD = context.workbook.worksheets.getItem(SHEET_NAME_BDD);\n      const baseEtapes = sheetBDD.tables.getItem(BASE_ETAPES_NOM_TABLE).getRange().getUsedRange();\n      // eslint-disable-next-line prettier/prettier\n      const baseParents = sheetBDD.tables.getItem(BASE_PARENTS_NOM_TABLE).getRange().getUsedRange();\n      baseEtapes.load(\"values\");\n      baseParents.load(\"values\");\n      await context.sync();\n      //enlevr la première ligne qui contient les noms des colonnes\n      baseEtapes.values.shift();\n      baseParents.values.shift();\n      // si une erreur est renvoyée dans checkBDD, on arrête le processus\n      checkBDD(baseEtapes.values, baseParents.values);\n      resolve([baseEtapes.values, baseParents.values]);\n    }).catch((error) => reject(error));\n  });\n}\n\n/**\n * fonction qui vérifie que la base de données est correcte, renvoie une erreur sinon\n * @param {string[][]} baseEtapes base d'étapes\n * @param {*} baseParents base de parents\n */\nfunction checkBDD(baseEtapes, baseParents) {\n  if (baseEtapes.length == 0) {\n    throw new Error(\"La base d'étapes est vide\");\n  }\n  if (baseParents.length == 0) {\n    throw new Error(\"La base de parents est vide\");\n  }\n\n  //check que pour chaque ligne, toutes les colonnes sont remplies\n  baseEtapes.forEach((etape) => {\n    etape.forEach((colonne) => {\n      if (colonne == null || colonne == \"\") {\n        throw new Error(\"Une ligne de la base d'étapes est incomplète\");\n      }\n    });\n  });\n  baseParents.forEach((parent) => {\n    parent.forEach((colonne) => {\n      if (colonne == null || colonne == \"\") {\n        throw new Error(\"Une ligne de la base de parents est incomplète\");\n      }\n    });\n  });\n\n  // check que id_etapes est unique\n  const idEtapes = baseEtapes.map((etape) => etape[0]);\n  const idEtapesUnique = [...new Set(idEtapes)];\n  if (idEtapes.length != idEtapesUnique.length) {\n    throw new Error(\"Les id des étapes ne sont pas uniques\");\n  }\n  // check que le doublet (id_etape_parent, id_etape_enfant) est unique\n  const idEtapesParents = baseParents.map((parent) => parent[0]);\n  const idEtapesEnfants = baseParents.map((parent) => parent[1]);\n  const idEtapesParentsEnfants = idEtapesParents.map((id, index) => [id, idEtapesEnfants[index]]);\n  const idEtapesParentsEnfantsUnique = [...new Set(idEtapesParentsEnfants.map((id) => id.join()))];\n  if (idEtapesParentsEnfants.length != idEtapesParentsEnfantsUnique.length) {\n    throw new Error(\"Les id des parents et enfants ne sont pas uniques\");\n  }\n  // check que la somme des flux (parent[2]) pour le même id_etape_parent est égale à 100\n  const idEtapesParentsUnique = [...new Set(idEtapesParents)];\n  idEtapesParentsUnique.forEach((id) => {\n    const flux = baseParents.filter((parent) => parent[0] == id).reduce((acc, curr) => acc + curr[2], 0);\n    if (flux != 100) {\n      throw new Error(`La somme des flux pour l'étape ${id} est différente de 100`);\n    }\n  });\n  // check qu'il y a au moins une étape associée à chaque id_etape_parent et id_etape_enfant\n  idEtapesParentsEnfants.forEach((row) => {\n    const idParent = row[0];\n    const idEnfant = row[1];\n    if (!idEtapes.includes(idParent)) {\n      throw new Error(`L'étape ${idParent} n'existe pas`);\n    }\n    if (!idEtapes.includes(idEnfant)) {\n      throw new Error(`L'étape ${idEnfant} n'existe pas`);\n    }\n  });\n\n  // check que chaque id_etape apparaît dans la base de parents\n  idEtapes.forEach((id) => {\n    if (!idEtapesParents.includes(id) && !idEtapesEnfants.includes(id)) {\n      throw new Error(`L'étape ${id} n'est pas associée à d'autres étapes`);\n    }\n  });\n}\n\n/**\n * Fonction qui renvoie un booléen indiquant si la feuille de nom worksheetName existe\n * @param {string} worksheetName nom de la feuille à vérifier\n * @returns {boolean} true si la feuille existe, false sinon\n */\nasync function worksheetExists(worksheetName) {\n  return new Promise((resolve, reject) => {\n    Excel.run(async (context) => {\n      const worksheets = context.workbook.worksheets;\n      const worksheet = worksheets.getItemOrNullObject(worksheetName);\n      await context.sync();\n      resolve(worksheet.isNullObject ? false : true);\n    }).catch((error) => reject(error));\n  });\n}\n\n/**\n * Fonction qui trie les tables de la base de données par ordre croissant de id_etapes et id_etape_parent\n */\nasync function sortBDD() {\n  await Excel.run(async (context) => {\n    const sheetBDD = context.workbook.worksheets.getItem(SHEET_NAME_BDD);\n    const baseEtapes = sheetBDD.tables.getItem(BASE_ETAPES_NOM_TABLE);\n    const baseParents = sheetBDD.tables.getItem(BASE_PARENTS_NOM_TABLE);\n    const sortFieldsEtapes = [\n      {\n        key: 0, // colonne id_etapes\n        ascending: true,\n      },\n    ];\n\n    const sortFieldsParents = [\n      {\n        key: 0, // colonne id_etape_parent\n        ascending: true,\n      },\n    ];\n\n    baseEtapes.sort.apply(sortFieldsEtapes);\n    baseParents.sort.apply(sortFieldsParents);\n    await context.sync();\n  });\n}\n\n/**\n * Fonction qui supprime les worksheets qui ne vont pas être utilisés\n * @param {string} tabNomWorksheet tableau des noms des worksheets qui vont être utilisés\n */\nasync function deleteOldEtapes(tabNomWorksheet) {\n  await Excel.run(async (context) => {\n    // Récupération de tous les worksheets du classeur\n    const worksheets = context.workbook.worksheets;\n    worksheets.load(\"items/name\");\n    await context.sync();\n    // On parcourt tous les worksheets et on supprime ceux qui ne sont pas dans la base (et qui ne sont pas le modèle, ou la table de configuration)\n    for (let i = 0; i < worksheets.items.length; i++) {\n      const worksheet = worksheets.items[i];\n      if (worksheet.name.includes(\"|\") && !tabNomWorksheet.includes(worksheet.name)) {\n        worksheet.delete();\n      }\n    }\n    await context.sync();\n  });\n}\n\n/**\n * génère les formules pour la première étape selon les données d'entrées\n * @param {string[]} etape ligne de la base d'étapes\n * @param {string} nomFeuille nom de la feuille cible\n */\nasync function EtapeUne(etape, nomFeuille, allTables) {\n  const NOM_DONNEES_ENTREE = \"DONNEES_ENTREES\";\n\n  return Excel.run(async (context) => {\n    //nom de l'étape\n    const nomEtape = etape[1];\n    //get worksheet\n    const worksheet = context.workbook.worksheets.getItem(nomFeuille);\n    //get données d'entrées\n    const donneesEntrees = context.workbook.worksheets.getItem(SHEET_NAME_DONNEES_ENTREE);\n    //charger les values\n    worksheet.load(\"values\");\n    donneesEntrees.load(\"values\");\n    await context.sync();\n    const colonnesDonnesEntrees = await obtenirColonnesParNomEnTete(\n      SHEET_NAME_TABLE_CONFIG,\n      TABLE_CONFIG_NOM,\n      NOM_DONNEES_ENTREE\n    );\n    //const colonnesEtapeUneEntree = await obtenirColonnesParNomEnTete(SHEET_NAME_TABLE_CONFIG, TABLE_CONFIG_NOM, nomEtape + \"_Entrée\");\n    const colonnesEtapeUneEntree = allTables[nomFeuille + \"|\" + nomEtape + \"_Entree\"];\n    //vérifier que les colonnes fdonnes entrees et colonnesEtapeUneEntree ont la même longueur\n    if (colonnesDonnesEntrees[0].length !== colonnesEtapeUneEntree.length) {\n      console.log(colonnesDonnesEntrees[0] + \" vs \" + colonnesEtapeUneEntree);\n      throw new Error(\"Les colonnes données d'entrées et colonnesEtapeUneEntree n'ont pas la même longueur : \\n\");\n    }\n    // parcourir pour i allant de 1 à la longueur de la colonne des données d'entrées\n    for (let i = 1; i < colonnesDonnesEntrees[0].length; i++) {\n      // for de 0 à 3 pour les 4 colonnes de la table de configuration\n      for (let j = 0; j < 4; j++) {\n        if (colonnesDonnesEntrees[j][i][0] !== \"\") {\n          const parts = colonnesEtapeUneEntree[i][j].split(\"!\");\n          const targetCell = worksheet.getRange(parts[1]);\n          // mettre l'addresse contenu dans donnees d'entrées dans la cellule en cours\n          targetCell.values = [[`=${SHEET_NAME_DONNEES_ENTREE}!${colonnesDonnesEntrees[j][i][0]}`]];\n        }\n      }\n    }\n    await context.sync();\n  });\n}\n\n/**\n * génère les formules pour les étapes qui ne sont pas la première selon les parents\n * @param {string[]} etape ligne de la base d'étapes\n * @param {string} nomFeuilleTarget nom de la feuille cible\n * @param {string[][]} parents tableau contenant les lignes de la base de parents qui sont les parents de l'étape\n * @param {string[][]} baseEtapes base d'étapes\n */\nasync function EtapeN(etape, nomFeuilleTarget, parents, baseEtapes, allTables) {\n  const NOM_COLONNE_TYPE_DE_CHAMP = \"TYPE_DE_CHAMP\";\n  await Excel.run(async (context) => {\n    //nom de l'étape\n    const nomEtapeTarget = etape[1];\n    //get worksheet\n    const worksheetTarget = context.workbook.worksheets.getItem(nomFeuilleTarget);\n    await context.sync();\n    // charger values de worksheetTarget\n    worksheetTarget.load(\"values\");\n    await context.sync();\n    // pour chaque parent de l'étape, on met dans tabSources les colonnes de données de sorties\n    const tabSources = [];\n    parents.forEach(async (parent) => {\n      // obtenir le nomEtape du parent\n      const nomEtapeParent = baseEtapes.find((row) => row[0] === parent[0])[1];\n      //obtenir le nom du worksheet du parent\n      const nomWorksheetParent = nomEtapeParent + \"|\" + parent[0];\n      const result = allTables[nomWorksheetParent + \"|\" + nomEtapeParent + \"_Sortie\"];\n      tabSources.push(result);\n    });\n    console.log(tabSources);\n    const colonnesTarget = allTables[nomFeuilleTarget + \"|\" + nomEtapeTarget + \"_Entree\"];\n    const colonneTypeChamp = await obtenirColonnesParNomEnTete(\n      SHEET_NAME_TABLE_CONFIG,\n      TABLE_CONFIG_NOM,\n      NOM_COLONNE_TYPE_DE_CHAMP\n    );\n\n    //vérifier que les colonnes target colonnes de tabSources et type champ ont la même longueur\n    if (!(colonnesTarget.length == tabSources[0].length && colonnesTarget.length == colonneTypeChamp[0].length)) {\n      console.log(colonnesTarget[0] + \" vs \" + tabSources[0][0]);\n      throw new Error(\"Les colonnes target et colonnes de tabSources n'ont pas la même longueur : \\n\");\n    }\n\n    //parcourir pour i allant de 1 à la longueur de la colonne de target\n    for (let i = 1; i < colonnesTarget.length; i++) {\n      // for de 0 à 3 pour les 4 colonnes de la table de configuration\n      for (let j = 0; j < 4; j++) {\n        const parts = colonnesTarget[i][j].split(\"!\");\n        const targetCell = worksheetTarget.getRange(parts[1]);\n        switch (colonneTypeChamp[0][i][0]) {\n          case \"Débit\": {\n            targetCell.formulas = [[calculeCelluleDebit(tabSources, i, j, parents)]];\n            break;\n          }\n          case \"Concentration\": {\n            targetCell.formulas = [[calculeCelluleConcentration(tabSources, i, j, parents)]];\n            break;\n          }\n          case \"Température\": {\n            targetCell.formulas = [[calculeCelluleTemperature(tabSources, i, j, parents)]];\n            break;\n          }\n          case \"PH\": {\n            targetCell.formulas = [[calculeCellulePH(tabSources, i, j, parents)]];\n            break;\n          }\n        }\n      }\n    }\n    await context.sync();\n  });\n}\n\n/**\n * fonction qui calcule le débit pour une cellule\n * @param {string[][][]} tabSources tableau qui contient les adresses des cellules des parents de l'étape [parent][ligne][colonne]\n * @param {int} i numéro de la ligne de la cellule\n * @param {int} j numéro de la colonne de la cellule\n * @returns {string} formule de la cellule selon la formule de débit (voir doc)\n */\nfunction calculeCelluleDebit(tabSources, i, j, parents) {\n  let result = \"=\";\n  //boucle for sur les sources ou les parents\n  for (let k = 0; k < parents.length; k++) {\n    result += `(${tabSources[k][i][j]}*${parents[k][2]}/100)+`;\n  }\n  result = result.slice(0, -1);\n  return result;\n}\n\n/**\n * fonction qui calcule la cooncentration pour une cellule\n * @param {string[][][]} tabSources tableau qui contient les adresses des cellules des parents de l'étape [parent][ligne][colonne]\n * @param {int} i numéro de la ligne de la cellule\n * @param {int} j numéro de la colonne de la cellule\n * @returns {string} formule de la cellule selon la formule de concentration (voir doc)\n */\nfunction calculeCelluleConcentration(tabSources, i, j, parents) {\n  let result = \"=(\";\n  for (let k = 0; k < parents.length; k++) {\n    result += `(${tabSources[k][1][j]}*${tabSources[k][i][j]}*${parents[k][2]}/100)+`;\n  }\n  result = result.slice(0, -1);\n  result += \") / (\";\n  for (let k = 0; k < parents.length; k++) {\n    result += `(${tabSources[k][1][j]}*${parents[k][2]}/100)+`;\n  }\n  result = result.slice(0, -1);\n  result += \")\";\n  return result;\n}\n\n/**\n * fonction qui calcule la température pour une cellule\n * @param {string[][][]} tabSources tableau qui contient les adresses des cellules des parents de l'étape [parent][ligne][colonne]\n * @param {int} i numéro de la ligne de la cellule\n * @param {int} j numéro de la colonne de la cellule\n * @returns {string} formule de la cellule selon le calcul de la température (voir doc)\n */\nfunction calculeCelluleTemperature(tabSources, i, j, parents) {\n  let result = \"=(\";\n  for (let k = 0; k < parents.length; k++) {\n    result += `(${tabSources[k][1][j]}*${tabSources[k][i][j]}*${parents[k][2]}/100)+`;\n  }\n  result = result.slice(0, -1);\n  result += \") / (\";\n  for (let k = 0; k < parents.length; k++) {\n    result += `(${tabSources[k][1][j]}*${parents[k][2]}/100)+`;\n  }\n  result = result.slice(0, -1);\n  result += \")\";\n  return result;\n}\n\n/**\n * fonction qui calcule le PH pour une cellule\n * @param {string[][][]} tabSources tableau qui contient les adresses des cellules des parents de l'étape [parent][ligne][colonne]\n * @param {int} i numéro de la ligne de la cellule\n * @param {int} j numéro de la colonne de la cellule\n * @returns {string} formule de la cellule\n */\nfunction calculeCellulePH(tabSources, i, j) {\n  return `=${tabSources[0][i][j]}`;\n}\n\n/**\n * fonction qui retourne les colonnes d'une table dont le nom de colonne commence par un préfixe\n * @param {string} nomFeuille nom du worksheet\n * @param {string} nomTableau nom de la table\n * @param {*} debutEnTete préfixe du nom de colonne\n * @returns {Promise<Array<Array<string>>>} tableau de colonnes\n */\nasync function obtenirColonnesParNomEnTete(nomFeuille, nomTableau, debutEnTete) {\n  let result = [];\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getItem(nomFeuille);\n    const table = worksheet.tables.getItem(nomTableau).getRange().getUsedRange();\n    table.load(\"values\");\n    await context.sync();\n    const headers = table.values[0];\n    const indices = headers\n      .map((header, index) => (header.startsWith(debutEnTete) ? index : -1))\n      .filter((index) => index >= 0);\n    const columnsObjects = await Promise.all(\n      indices.map((index) => table.getColumn(index).getUsedRange().load(\"values\"))\n    );\n    await context.sync();\n    const columns = columnsObjects.map((columnValues) => {\n      return columnValues.values;\n    });\n    result.push(...columns);\n  });\n  return result;\n}\n\n/**\n * Récupère les adresses de toutes les cellules de la plage de données d'une table dont le nom commence par une chaîne spécifiée\n * @param {string} nomWorksheet nom de la feuille\n * @param {string} tablePrefix prefixe du nom de la table\n * @returns {string[]} tableau des adresses des cellules de la plage de données de la table\n */\nasync function getTableAddressesByPrefix(nomWorksheet, tablePrefix) {\n  try {\n    // Charger l'API Excel\n    const addresses = [];\n    await Excel.run(async (context) => {\n      const sheet = context.workbook.worksheets.getItem(nomWorksheet);\n      sheet.load(\"tables\");\n      await context.sync();\n      // Récupérer les tables dans le workbook\n      const tables = sheet.tables;\n      tables.load(\"items/name\");\n      // Exécuter les requêtes\n      await context.sync();\n      // Trouver la première table dont le nom commence par la chaîne spécifiée\n      const table = tables.items.find((t) => t.name.startsWith(tablePrefix));\n      if (!table) {\n        console.error(`Table with prefix \"${tablePrefix}\" not found`);\n        return null;\n      }\n      // Récupérer les adresses de chaque cellule de la plage de données\n      const range = table.getDataBodyRange();\n      range.load([\"address\", \"values/length\"]);\n      await context.sync();\n      // Stocker les adresses dans un tableau\n      const rowCount = range.values.length;\n      const colCount = range.values[0].length;\n      for (let row = 0; row < rowCount; row++) {\n        const rowAdresses = [];\n        for (let col = 0; col < colCount; col++) {\n          const cell = range.getCell(row, col);\n          cell.load(\"address\");\n          await context.sync();\n          rowAdresses.push(cell.address);\n        }\n        addresses.push(rowAdresses);\n      }\n    });\n    // Retourner le tableau d'adresses\n    return addresses;\n  } catch (error) {\n    console.error(error);\n    return null;\n  }\n}\n\nasync function initAllTables() {\n  let tablesDict = {};\n  try {\n    // Charger l'API Excel\n    await Excel.run(async (context) => {\n      await context.sync();\n      var tables = context.workbook.tables;\n      // chargement des tables\n      tables.load(\"items/name\");\n      await context.sync();\n      // itération à travers toutes les tables\n      for (let i = 0; i < tables.items.length; i++) {\n        let table = tables.items[i];\n        let tableName = table.name;\n        // si le nom de la table ne contient pas \"Entree\" ou \"Sortie\" on passe à la table suivante\n        if (!tableName.includes(\"Entree\") && !tableName.includes(\"Sortie\")) {\n          continue;\n        }\n        // obtenir le nom du classeur de la table\n        let worksheet = table.worksheet;\n        worksheet.load(\"name\");\n        const range = table.getDataBodyRange();\n        range.load(\"address, values/length\");\n        await context.sync();\n        const rowCount = range.values.length;\n        let worksheetName = worksheet.name;\n        let index = tableName.lastIndexOf(\"e\");\n        let tableShortName = worksheetName + \"|\" + tableName.slice(0, index + 1);\n        const addresses = range.address;\n        //\n        const prefixAdresse = addresses.slice(0, addresses.indexOf(\"!\") + 1);\n        const premiereColonne = addresses[addresses.indexOf(\"!\") + 1];\n        const premiereLigne = Number(addresses.slice(addresses.indexOf(\"!\") + 2, addresses.indexOf(\":\")));\n        // construire tableau de 4 colonnes possibles commençant à la première colonne\n        const colonnes = [\n          premiereColonne,\n          String.fromCharCode(premiereColonne.charCodeAt(0) + 1),\n          String.fromCharCode(premiereColonne.charCodeAt(0) + 2),\n          String.fromCharCode(premiereColonne.charCodeAt(0) + 3),\n        ];\n        // on construit un tableau contenant chaque adresse de cellule à partir de la range 'adresses' en parcourant les lignes de peremiereLigne à premiereLigne + range.values.length et les colonnes de colonnes\n        const constTabAddresses = [tableShortName];\n        for (let row = premiereLigne; row < premiereLigne + rowCount; row++) {\n          const rowAdresses = [];\n          for (let col = 0; col < colonnes.length; col++) {\n            rowAdresses.push(prefixAdresse + colonnes[col] + row);\n          }\n          constTabAddresses.push(rowAdresses);\n        }\n        tablesDict[tableShortName] = constTabAddresses;\n      }\n    });\n    return tablesDict;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n}\n\n/**\n * Fonction qui permet d'afficher une popup d'erreur\n * @param {string} error message d'erreur\n */\nfunction errorPopUp(error) {\n  Office.context.ui.displayDialogAsync(\n    // eslint-disable-next-line no-undef\n    window.location.origin + \"/error.html?erreur=\" + error,\n    { height: 25, width: 35 },\n    (result) => {\n      const dialog = result.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {\n        const data = JSON.parse(arg.message);\n        dialog.close();\n      });\n    }\n  );\n}\n\nasync function calculPertesEnEau(allTables, baseEtapes) {\n  let resultCol0 = \"=( \";\n  let resultCol1 = \"=( \";\n  let resultCol2 = \"=( \";\n  let resultCol3 = \"=( \";\n  console.log(allTables);\n  baseEtapes.forEach((etape) => {\n    const nomTable = etape[1] + \"|\" + etape[0].toString() + \"|\" + etape[1] + \"_Sortie\";\n    const table = allTables[nomTable];\n    const ligne = table[LIGNE_PERTES_EN_EAU_SUR_CETTE_ETAPES_TABLEAU_SORTIE];\n    resultCol0 += ligne[0] + \"+\";\n    resultCol1 += ligne[1] + \"+\";\n    resultCol2 += ligne[2] + \"+\";\n    resultCol3 += ligne[3] + \"+\";\n  });\n  // on enlève le dernier +\n  resultCol0 = resultCol0.slice(0, resultCol0.length - 1);\n  resultCol1 = resultCol1.slice(0, resultCol1.length - 1);\n  resultCol2 = resultCol2.slice(0, resultCol2.length - 1);\n  resultCol3 = resultCol3.slice(0, resultCol3.length - 1);\n\n  resultCol0 += \" ) / '\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE[0];\n  resultCol1 += \" ) / '\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE[1];\n  resultCol2 += \" ) / '\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE[2];\n  resultCol3 += \" ) / '\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE[3];\n\n  console.log(resultCol0, resultCol1, resultCol2, resultCol3);\n\n  Excel.run(async function (context) {\n    //get données d'entrées\n    const donneesEntrees = context.workbook.worksheets.getItem(SHEET_NAME_DONNEES_ENTREE);\n    // Obtenez la plage de cellules qui contient la cellule à modifier\n    var range0 = donneesEntrees.getRange(\n      \"'\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_PERTES_EN_EAU_DONNES_ENTREE[0]\n    );\n    var range1 = donneesEntrees.getRange(\n      \"'\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_PERTES_EN_EAU_DONNES_ENTREE[1]\n    );\n    var range2 = donneesEntrees.getRange(\n      \"'\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_PERTES_EN_EAU_DONNES_ENTREE[2]\n    );\n    var range3 = donneesEntrees.getRange(\n      \"'\" + SHEET_NAME_DONNEES_ENTREE + \"'\" + ADRESSES_PERTES_EN_EAU_DONNES_ENTREE[3]\n    );\n    await context.sync();\n\n    // Modifiez la valeur de la cellule à \"nouvelleValeur\"\n    range0.formulas = [[resultCol0]];\n    range1.formulas = [[resultCol1]];\n    range2.formulas = [[resultCol2]];\n    range3.formulas = [[resultCol3]];\n    // Exécutez les modifications de la feuille de calcul\n    return context.sync();\n  }).catch(function (error) {\n    console.log(\"Une erreur est survenue : \" + error);\n  });\n}\n\nfunction openDialog(message) {\n  Office.context.ui.displayDialogAsync(\n    window.location.origin + \"/popup.html?message=\" + message,\n    { height: 25, width: 35 },\n    (result) => {\n      const dialog = result.value;\n      dialog.addEventHandler(Office.EventType.DialogMessageReceived, (arg) => {\n        const data = JSON.parse(arg.message);\n        dialog.close();\n      });\n    }\n  );\n}\n","// Imports\nimport ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___ from \"../../node_modules/html-loader/dist/runtime/getUrl.js\";\nvar ___HTML_LOADER_IMPORT_0___ = new URL(\"./taskpane.css\", import.meta.url);\nvar ___HTML_LOADER_IMPORT_1___ = new URL(\"../../assets/logo-filled.png\", import.meta.url);\n// Module\nvar ___HTML_LOADER_REPLACEMENT_0___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_0___);\nvar ___HTML_LOADER_REPLACEMENT_1___ = ___HTML_LOADER_GET_SOURCE_FROM_IMPORT___(___HTML_LOADER_IMPORT_1___);\nvar code = \" <!DOCTYPE html> <html> <head> <meta charset=\\\"UTF-8\\\"/> <meta http-equiv=\\\"X-UA-Compatible\\\" content=\\\"IE=Edge\\\"/> <meta name=\\\"viewport\\\" content=\\\"width=device-width,initial-scale=2\\\"> <title>Contoso Task Pane Add-in</title> <\" + \"script src=\\\"https://appsforoffice.microsoft.com/lib/1.1/hosted/office.js\\\"><\" + \"/script> <link rel=\\\"stylesheet\\\" href=\\\"https://static2.sharepointonline.com/files/fabric/office-ui-fabric-core/11.0.0/css/fabric.min.css\\\"/> <link href=\\\"\" + ___HTML_LOADER_REPLACEMENT_0___ + \"\\\" rel=\\\"stylesheet\\\"/> </head> <body class=\\\"ms-font-m ms-welcome ms-Fabric\\\"> <header class=\\\"ms-welcome__header ms-bgColor-neutralLighter\\\"> <img width=\\\"242\\\" height=\\\"65\\\" src=\\\"\" + ___HTML_LOADER_REPLACEMENT_1___ + \"\\\" alt=\\\"Contoso\\\" title=\\\"Contoso\\\"/> <h1 class=\\\"ms-font-su\\\" style=\\\"text-align:center\\\">Application Traitement des eaux</h1> </header> <section id=\\\"sideload-msg\\\" class=\\\"ms-welcome__main\\\"> <h2 class=\\\"ms-font-xl\\\">Chargement de l'app.</h2> </section> <main id=\\\"app-body\\\" class=\\\"ms-welcome__main\\\" style=\\\"display:none;height:30%\\\"> <br/> <button class=\\\"button-4\\\" role=\\\"button\\\" id=\\\"app\\\">Lancer le processus</button> </main> </body> </html> \";\n// Exports\nexport default code;"],"names":["module","exports","url","options","String","__esModule","default","hash","maybeNeedQuotes","test","concat","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","m","n","getter","d","a","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","scriptUrl","importScripts","location","document","currentScript","src","scripts","getElementsByTagName","length","Error","replace","p","b","baseURI","self","href","SHEET_NAME_BDD","BASE_ETAPES_NOM_TABLE","BASE_PARENTS_NOM_TABLE","SHEET_NAME_DONNEES_ENTREE","SHEET_NAME_TABLE_CONFIG","TABLE_CONFIG_NOM","LIGNE_PERTES_EN_EAU_SUR_CETTE_ETAPES_TABLEAU_SORTIE","ADRESSES_PERTES_EN_EAU_DONNES_ENTREE","ADRESSES_DEBIT_JOURNALIER_EB_DONNES_ENTREE","app","Excel","run","context","runProcess","catch","error","Office","ui","displayDialogAsync","origin","height","width","result","dialog","value","addEventHandler","EventType","DialogMessageReceived","arg","JSON","parse","message","close","console","sync","Promise","resolve","reject","sortBDD","getBDD","BDD","baseEtapes","baseParents","initSheets","worksheetsEtapes","initAllTables","allTables","etape","i","EtapeUne","idEtape","parents","filter","ligne","EtapeN","calculPertesEnEau","sheetBDD","workbook","worksheets","getItem","id","nomEtape","nomFeuille","worksheetExists","sheetModel","newSheet","copy","name","visibility","push","deleteOldEtapes","tables","getRange","getUsedRange","load","values","shift","checkBDD","forEach","colonne","parent","idEtapes","map","idEtapesUnique","Set","idEtapesParents","idEtapesEnfants","idEtapesParentsEnfants","index","idEtapesParentsEnfantsUnique","join","reduce","acc","curr","row","idParent","idEnfant","includes","worksheetName","worksheet","getItemOrNullObject","isNullObject","sortFieldsEtapes","ascending","sortFieldsParents","sort","apply","tabNomWorksheet","items","delete","donneesEntrees","obtenirColonnesParNomEnTete","colonnesDonnesEntrees","colonnesEtapeUneEntree","log","j","parts","split","nomFeuilleTarget","nomEtapeTarget","worksheetTarget","tabSources","nomEtapeParent","find","nomWorksheetParent","colonnesTarget","colonneTypeChamp","targetCell","formulas","calculeCelluleDebit","calculeCelluleConcentration","calculeCelluleTemperature","calculeCellulePH","k","slice","nomTableau","debutEnTete","table","headers","indices","header","startsWith","all","getColumn","columnsObjects","columns","columnValues","tablesDict","tableName","range","getDataBodyRange","rowCount","lastIndexOf","tableShortName","addresses","address","prefixAdresse","indexOf","premiereColonne","premiereLigne","Number","colonnes","fromCharCode","charCodeAt","constTabAddresses","rowAdresses","col","resultCol0","resultCol1","resultCol2","resultCol3","nomTable","toString","range0","range1","range2","range3","onReady","info","host","HostType","getElementById","style","display","addEventListener","___HTML_LOADER_IMPORT_0___","URL","___HTML_LOADER_IMPORT_1___"],"sourceRoot":""}